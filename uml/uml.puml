@startuml

' Классы
class User {
  Long id
  String name
  String email
  String password
  Role role
  String avatarUrl
  String description
  + register(): void
  + login(): void
  + updateProfile(): void
  + changePassword(): void
  + subscribeToUser(User user): void
  + getSubscriptions(): List<User>
}

enum Role {
  VOLUNTEER
  ORGANIZER
  ADMIN
}

class Project {
  Long id
  String title
  String description
  String location
  Date startDate
  Date endDate
  User organizer
  ProjectStatus status
  + createProject(): void
  + updateProject(): void
  + deleteProject(): void
  + getVolunteers(): List<Volunteer>
  + notifyVolunteers(String message): void
}

class ProjectStatus {
  Long id
  String name
}

class Volunteer {
  Long id
  User user
  Project project
  Date registrationDate
  + registerForProject(Project project): void
  + leaveFeedback(Project project, int rating, String comment): void
}

class Feedback {
  Long id
  Volunteer volunteer
  Project project
  int rating
  String comment
  Date date
  + submitFeedback(): void
  + getFeedbackForProject(Project project): List<Feedback>
}

class Notification {
  Long id
  User user
  String message
  Date date
  + sendNotification(User user, String message): void
  + getNotificationsForUser(User user): List<Notification>
}

class Report {
  Long id
  Project project
  String content
  Date createdAt
  + generateReport(Project project): Report
}

class City {
  Long id
  String name
  List<Project> projects
  + getProjectsForCity(): List<Project>
}

class Subscription {
  Long id
  User follower
  User followee
  + subscribe(User follower, User followee): void
  + unsubscribe(User follower, User followee): void
  + getSubscriptionsForUser(User user): List<Subscription>
}

' Репозитории
interface UserRepository {
  + findByEmail(String email): User
  + findById(Long id): User
  + save(User user): void
  + delete(User user): void
  + findAll(): List<User>
}

interface ProjectRepository {
  + findById(Long id): Project
  + findAll(): List<Project>
  + save(Project project): void
  + delete(Project project): void
}

interface FeedbackRepository {
  + findByProject(Project project): List<Feedback>
  + save(Feedback feedback): void
  + delete(Feedback feedback): void
}

interface NotificationRepository {
  + findByUser(User user): List<Notification>
  + save(Notification notification): void
  + delete(Notification notification): void
}

interface SubscriptionRepository {
  + findByFollower(User follower): List<Subscription>
  + findByFollowee(User followee): List<Subscription>
  + save(Subscription subscription): void
  + delete(Subscription subscription): void
}

interface CityRepository {
  + findById(Long id): City
  + findAll(): List<City>
  + save(City city): void
  + delete(City city): void
}

' Сервисы
interface UserService {
  + register(User user): void
  + login(String email, String password): User
  + updateProfile(User user): void
  + changePassword(User user, String newPassword): void
  + subscribeToUser(User follower, User followee): void
  + getSubscriptions(User user): List<User>
  + deleteUser(User user): void
  + getAllUsers(): List<User>
  + updateUserRole(Long userId, Role role): void
}

class UserServiceImpl {
  UserRepository userRepository
  + register(User user): void
  + login(String email, String password): User
  + updateProfile(User user): void
  + changePassword(User user, String newPassword): void
  + subscribeToUser(User follower, User followee): void
  + getSubscriptions(User user): List<User>
  + deleteUser(User user): void
  + getAllUsers(): List<User>
  + updateUserRole(Long userId, Role role): void
}

interface ProjectService {
  + createProject(Project project): void
  + updateProject(Project project): void
  + deleteProject(Project project): void
  + getVolunteers(Project project): List<Volunteer>
  + notifyVolunteers(Project project, String message): void
  + getAllProjects(): List<Project>
}

class ProjectServiceImpl {
  ProjectRepository projectRepository
  + createProject(Project project): void
  + updateProject(Project project): void
  + deleteProject(Project project): void
  + getVolunteers(Project project): List<Volunteer>
  + notifyVolunteers(Project project, String message): void
  + getAllProjects(): List<Project>
}

interface FeedbackService {
  + submitFeedback(Feedback feedback): void
  + getFeedbackForProject(Project project): List<Feedback>
  + deleteFeedback(Feedback feedback): void
}

class FeedbackServiceImpl {
  FeedbackRepository feedbackRepository
  + submitFeedback(Feedback feedback): void
  + getFeedbackForProject(Project project): List<Feedback>
  + deleteFeedback(Feedback feedback): void
}

interface NotificationService {
  + sendNotification(User user, String message): void
  + getNotificationsForUser(User user): List<Notification>
  + deleteNotification(Notification notification): void
}

class NotificationServiceImpl {
  NotificationRepository notificationRepository
  + sendNotification(User user, String message): void
  + getNotificationsForUser(User user): List<Notification>
  + deleteNotification(Notification notification): void
}

interface SubscriptionService {
  + subscribe(User follower, User followee): void
  + unsubscribe(User follower, User followee): void
  + getSubscriptionsForUser(User user): List<Subscription>
  + deleteSubscription(Subscription subscription): void
}

class SubscriptionServiceImpl {
  SubscriptionRepository subscriptionRepository
  + subscribe(User follower, User followee): void
  + unsubscribe(User follower, User followee): void
  + getSubscriptionsForUser(User user): List<Subscription>
  + deleteSubscription(Subscription subscription): void
}

interface CityService {
  + getProjectsForCity(City city): List<Project>
  + getAllCities(): List<City>
  + deleteCity(City city): void
}

class CityServiceImpl {
  CityRepository cityRepository
  + getProjectsForCity(City city): List<Project>
  + getAllCities(): List<City>
  + deleteCity(City city): void
}

' Контроллеры
class UserController {
  UserService userService
  + register(User user): void
  + login(String email, String password): User
  + updateProfile(User user): void
  + changePassword(User user, String newPassword): void
  + subscribeToUser(User follower, User followee): void
  + getSubscriptions(User user): List<User>
  + deleteUser(User user): void
  + getAllUsers(): List<User>
  + updateUserRole(Long userId, Role role): void
}

class ProjectController {
  ProjectService projectService
  + createProject(Project project): void
  + updateProject(Project project): void
  + deleteProject(Project project): void
  + getVolunteers(Project project): List<Volunteer>
  + notifyVolunteers(Project project, String message): void
  + getAllProjects(): List<Project>
}

class FeedbackController {
  FeedbackService feedbackService
  + submitFeedback(Feedback feedback): void
  + getFeedbackForProject(Project project): List<Feedback>
  + deleteFeedback(Feedback feedback): void
}

class NotificationController {
  NotificationService notificationService
  + sendNotification(User user, String message): void
  + getNotificationsForUser(User user): List<Notification>
  + deleteNotification(Notification notification): void
}

class SubscriptionController {
  SubscriptionService subscriptionService
  + subscribe(User follower, User followee): void
  + unsubscribe(User follower, User followee): void
  + getSubscriptionsForUser(User user): List<Subscription>
  + deleteSubscription(Subscription subscription): void
}

class CityController {
  CityService cityService
  + getProjectsForCity(City city): List<Project>
  + getAllCities(): List<City>
  + deleteCity(City city): void
}

class AdminController {
  UserService userService
  + getAllUsers(): List<User>
  + updateUserRole(Long userId, Role role): void
  + deleteUser(User user): void
  + getAllProjects(): List<Project>
}

' Секьюрити
class SecurityConfig {
  + configure(HttpSecurity http): void
}

class CustomUserDetailsService {
  UserRepository userRepository
  + loadUserByUsername(String username): UserDetails
}

' Связи между классами, репозиториями, сервисами и контроллерами
User "1" -- "1" Role : has
Project "1" -- "1" User : organized by
Volunteer "1" -- "1" User : is
Volunteer "1" -- "1" Project : participates in
Feedback "1" -- "1" Volunteer : written by
Feedback "1" -- "1" Project : about
Notification "1" -- "1" User : notifies
Report "1" -- "1" Project : is about
Project "0..*" -- "1" City : located in
Subscription "1" -- "1" User : follower
Subscription "1" -- "1" User : followee

UserServiceImpl --|> UserRepository
ProjectServiceImpl --|> ProjectRepository
FeedbackServiceImpl --|> FeedbackRepository
NotificationServiceImpl --|> NotificationRepository
SubscriptionServiceImpl --|> SubscriptionRepository
CityServiceImpl --|> CityRepository

UserController --|> UserServiceImpl
ProjectController --|> ProjectServiceImpl
FeedbackController --|> FeedbackServiceImpl
NotificationController --|> NotificationServiceImpl
SubscriptionController --|> SubscriptionServiceImpl
CityController --|> CityServiceImpl
AdminController --|> UserServiceImpl

CustomUserDetailsService --|> UserRepository
SecurityConfig --> CustomUserDetailsService

@enduml


